//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.1.5.310
//  GPLEX input file <../../Parsing/Scanner.lex - 2014-10-06 11:09:24>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, parser, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, embedbuffers
//  Fallback code page: Target machine default
//

//
// Experimental embedded frame
// Version 1.1.4 of 10-May-2010
//
//
#define BACKUP
#define BABEL
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;


namespace Marius.Script.Parsing
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 276;
        const int initial = 277;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int REGEX = 1;

#region user code
/* unicode/hex/char escape sequences are dealt with in semantic action */
/* identifier start and part do not include {escape_sequence} consume invalid identifiers as well (error should be reported at sematic action level) */
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {277, 309, 0};

#region TwoLevelCharacterMap
    //
    // There are 67 equivalence classes
    // There are 256 character sequence regions
    // There are 47 tables, 12032 entries
    //
    static sbyte[] mLo0 = new sbyte[256] {
/*     '\0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 66, 20, 66, 66, 0, 18, 18, 
/*   '\x10' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/*   '\x20' */ 66, 35, 17, 18, 62, 31, 32, 21, 26, 27, 3, 13, 28, 14, 11, 1, 
/*      '0' */ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 29, 30, 5, 37, 2, 38, 
/*      '@' */ 18, 16, 16, 16, 16, 6, 8, 61, 61, 61, 61, 61, 61, 61, 61, 7, 
/*      'P' */ 61, 61, 61, 61, 61, 61, 61, 61, 15, 61, 61, 24, 4, 25, 34, 63, 
/*      '`' */ 18, 43, 47, 52, 57, 12, 42, 58, 50, 53, 61, 48, 44, 59, 46, 49, 
/*      'p' */ 55, 61, 40, 45, 39, 41, 56, 51, 60, 54, 61, 22, 33, 23, 36, 18, 
/*   '\x80' */ 18, 18, 18, 18, 18, 66, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/*   '\x90' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/*   '\xA0' */ 66, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 18, 18, 18, 18, 18, 
/*   '\xB0' */ 18, 18, 18, 18, 18, 61, 18, 18, 18, 18, 61, 18, 18, 18, 18, 18, 
/*   '\xC0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/*   '\xD0' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 
/*   '\xE0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/*   '\xF0' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61 };
    static sbyte[] mLo1 = new sbyte[256] {
/* '\u0100' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0110' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0120' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0130' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0140' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0150' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0160' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0170' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0180' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0190' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u01A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u01B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u01C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u01D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u01E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u01F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61 };
    static sbyte[] mLo2 = new sbyte[256] {
/* '\u0200' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0210' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0220' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0230' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0240' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0250' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0260' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0270' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0280' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0290' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u02A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u02B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u02C0' */ 61, 61, 18, 18, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u02D0' */ 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u02E0' */ 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 18, 
/* '\u02F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo3 = new sbyte[256] {
/* '\u0300' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0310' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0320' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0330' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0340' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0350' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0360' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0370' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 61, 61, 61, 18, 18, 
/* '\u0380' */ 18, 18, 18, 18, 18, 18, 61, 18, 61, 61, 61, 18, 61, 18, 61, 61, 
/* '\u0390' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u03A0' */ 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u03B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u03C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\u03D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u03E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u03F0' */ 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61 };
    static sbyte[] mLo4 = new sbyte[256] {
/* '\u0400' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0410' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0420' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0430' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0440' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0450' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0460' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0470' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0480' */ 61, 61, 18, 64, 64, 64, 64, 18, 18, 18, 61, 61, 61, 61, 61, 61, 
/* '\u0490' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u04A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u04B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u04C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u04D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u04E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u04F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61 };
    static sbyte[] mLo5 = new sbyte[256] {
/* '\u0500' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0510' */ 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0520' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0530' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0540' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0550' */ 61, 61, 61, 61, 61, 61, 61, 18, 18, 61, 18, 18, 18, 18, 18, 18, 
/* '\u0560' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0570' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0580' */ 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0590' */ 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u05A0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u05B0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 64, 
/* '\u05C0' */ 18, 64, 64, 18, 64, 64, 18, 64, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u05D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u05E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 
/* '\u05F0' */ 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo6 = new sbyte[256] {
/* '\u0600' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0610' */ 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0620' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0630' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 
/* '\u0640' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 64, 64, 64, 64, 64, 
/* '\u0650' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 
/* '\u0660' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 61, 61, 
/* '\u0670' */ 64, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0680' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0690' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u06A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u06B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u06C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u06D0' */ 61, 61, 61, 61, 18, 61, 64, 64, 64, 64, 64, 64, 64, 18, 18, 64, 
/* '\u06E0' */ 64, 64, 64, 64, 64, 61, 61, 64, 64, 18, 64, 64, 64, 64, 61, 61, 
/* '\u06F0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 61, 61, 61, 18, 18, 61 };
    static sbyte[] mLo7 = new sbyte[256] {
/* '\u0700' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0710' */ 61, 64, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0720' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0730' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0740' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 61, 61, 61, 
/* '\u0750' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0760' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\u0770' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0780' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0790' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u07A0' */ 61, 61, 61, 61, 61, 61, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u07B0' */ 64, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u07C0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 61, 61, 61, 61, 61, 61, 
/* '\u07D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u07E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 64, 64, 64, 64, 64, 
/* '\u07F0' */ 64, 64, 64, 64, 61, 61, 18, 18, 18, 18, 61, 18, 18, 18, 18, 18 };
    static sbyte[] mLo8 = new sbyte[256] {
/* '\u0800' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0810' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0820' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0830' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0840' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0850' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0860' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0870' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0880' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0890' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u08A0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u08B0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u08C0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u08D0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u08E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u08F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo9 = new sbyte[256] {
/* '\u0900' */ 18, 64, 64, 64, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0910' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0920' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0930' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 64, 61, 64, 64, 
/* '\u0940' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 
/* '\u0950' */ 61, 64, 64, 64, 64, 18, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0960' */ 61, 61, 64, 64, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0970' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 61, 61, 61, 61, 
/* '\u0980' */ 18, 64, 64, 64, 18, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 61, 
/* '\u0990' */ 61, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u09A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\u09B0' */ 61, 18, 61, 18, 18, 18, 61, 61, 61, 61, 18, 18, 64, 61, 64, 64, 
/* '\u09C0' */ 64, 64, 64, 64, 64, 18, 18, 64, 64, 18, 18, 64, 64, 64, 61, 18, 
/* '\u09D0' */ 18, 18, 18, 18, 18, 18, 18, 64, 18, 18, 18, 18, 61, 61, 18, 61, 
/* '\u09E0' */ 61, 61, 64, 64, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u09F0' */ 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo10 = new sbyte[256] {
/* '\u0A00' */ 18, 64, 64, 64, 18, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 61, 
/* '\u0A10' */ 61, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0A20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\u0A30' */ 61, 18, 61, 61, 18, 61, 61, 18, 61, 61, 18, 18, 64, 18, 64, 64, 
/* '\u0A40' */ 64, 64, 64, 18, 18, 18, 18, 64, 64, 18, 18, 64, 64, 64, 18, 18, 
/* '\u0A50' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 61, 61, 61, 18, 61, 18, 
/* '\u0A60' */ 18, 18, 18, 18, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0A70' */ 64, 64, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0A80' */ 18, 64, 64, 64, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 
/* '\u0A90' */ 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0AA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\u0AB0' */ 61, 18, 61, 61, 18, 61, 61, 61, 61, 61, 18, 18, 64, 61, 64, 64, 
/* '\u0AC0' */ 64, 64, 64, 64, 64, 64, 18, 64, 64, 64, 18, 64, 64, 64, 18, 18, 
/* '\u0AD0' */ 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0AE0' */ 61, 61, 64, 64, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0AF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo11 = new sbyte[256] {
/* '\u0B00' */ 18, 64, 64, 64, 18, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 61, 
/* '\u0B10' */ 61, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0B20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\u0B30' */ 61, 18, 61, 61, 18, 61, 61, 61, 61, 61, 18, 18, 64, 61, 64, 64, 
/* '\u0B40' */ 64, 64, 64, 64, 18, 18, 18, 64, 64, 18, 18, 64, 64, 64, 18, 18, 
/* '\u0B50' */ 18, 18, 18, 18, 18, 18, 64, 64, 18, 18, 18, 18, 61, 61, 18, 61, 
/* '\u0B60' */ 61, 61, 18, 18, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0B70' */ 18, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0B80' */ 18, 18, 64, 61, 18, 61, 61, 61, 61, 61, 61, 18, 18, 18, 61, 61, 
/* '\u0B90' */ 61, 18, 61, 61, 61, 61, 18, 18, 18, 61, 61, 18, 61, 18, 61, 61, 
/* '\u0BA0' */ 18, 18, 18, 61, 61, 18, 18, 18, 61, 61, 61, 18, 18, 18, 61, 61, 
/* '\u0BB0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 64, 64, 
/* '\u0BC0' */ 64, 64, 64, 18, 18, 18, 64, 64, 64, 18, 64, 64, 64, 64, 18, 18, 
/* '\u0BD0' */ 18, 18, 18, 18, 18, 18, 18, 64, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0BE0' */ 18, 18, 18, 18, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0BF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo12 = new sbyte[256] {
/* '\u0C00' */ 18, 64, 64, 64, 18, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 
/* '\u0C10' */ 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0C20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\u0C30' */ 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 18, 18, 18, 18, 64, 64, 
/* '\u0C40' */ 64, 64, 64, 64, 64, 18, 64, 64, 64, 18, 64, 64, 64, 64, 18, 18, 
/* '\u0C50' */ 18, 18, 18, 18, 18, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0C60' */ 61, 61, 18, 18, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0C70' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0C80' */ 18, 18, 64, 64, 18, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 
/* '\u0C90' */ 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0CA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\u0CB0' */ 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 18, 18, 64, 61, 64, 64, 
/* '\u0CC0' */ 64, 64, 64, 64, 64, 18, 64, 64, 64, 18, 64, 64, 64, 64, 18, 18, 
/* '\u0CD0' */ 18, 18, 18, 18, 18, 64, 64, 18, 18, 18, 18, 18, 18, 18, 61, 18, 
/* '\u0CE0' */ 61, 61, 64, 64, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0CF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo13 = new sbyte[256] {
/* '\u0D00' */ 18, 18, 64, 64, 18, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 
/* '\u0D10' */ 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0D20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\u0D30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 64, 64, 
/* '\u0D40' */ 64, 64, 64, 64, 18, 18, 64, 64, 64, 18, 64, 64, 64, 64, 18, 18, 
/* '\u0D50' */ 18, 18, 18, 18, 18, 18, 18, 64, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0D60' */ 61, 61, 18, 18, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0D70' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0D80' */ 18, 18, 64, 64, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0D90' */ 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 61, 61, 61, 61, 61, 61, 
/* '\u0DA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0DB0' */ 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 18, 18, 
/* '\u0DC0' */ 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 64, 18, 18, 18, 18, 64, 
/* '\u0DD0' */ 64, 64, 64, 64, 64, 18, 64, 18, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0DE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0DF0' */ 18, 18, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo14 = new sbyte[256] {
/* '\u0E00' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0E10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0E20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0E30' */ 61, 64, 61, 61, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 
/* '\u0E40' */ 61, 61, 61, 61, 61, 61, 61, 64, 64, 64, 64, 64, 64, 64, 64, 18, 
/* '\u0E50' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u0E60' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0E70' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0E80' */ 18, 61, 61, 18, 61, 18, 18, 61, 61, 18, 61, 18, 18, 61, 18, 18, 
/* '\u0E90' */ 18, 18, 18, 18, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0EA0' */ 18, 61, 61, 61, 18, 61, 18, 61, 18, 18, 61, 61, 18, 61, 61, 61, 
/* '\u0EB0' */ 61, 64, 61, 61, 64, 64, 64, 64, 64, 64, 18, 64, 64, 61, 18, 18, 
/* '\u0EC0' */ 61, 61, 61, 61, 61, 18, 61, 18, 64, 64, 64, 64, 64, 64, 18, 18, 
/* '\u0ED0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 61, 61, 18, 18, 
/* '\u0EE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0EF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo15 = new sbyte[256] {
/* '\u0F00' */ 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0F10' */ 18, 18, 18, 18, 18, 18, 18, 18, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u0F20' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u0F30' */ 18, 18, 18, 18, 18, 64, 18, 64, 18, 64, 18, 18, 18, 18, 64, 64, 
/* '\u0F40' */ 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0F50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u0F60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 
/* '\u0F70' */ 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0F80' */ 64, 64, 64, 64, 64, 18, 64, 64, 61, 61, 61, 61, 18, 18, 18, 18, 
/* '\u0F90' */ 64, 64, 64, 64, 64, 64, 64, 64, 18, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0FA0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u0FB0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 
/* '\u0FC0' */ 18, 18, 18, 18, 18, 18, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0FD0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0FE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u0FF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo16 = new sbyte[256] {
/* '\u1000' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1010' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1020' */ 61, 61, 18, 61, 61, 61, 61, 61, 18, 61, 61, 18, 64, 64, 64, 64, 
/* '\u1030' */ 64, 64, 64, 18, 18, 18, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u1040' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u1050' */ 61, 61, 61, 61, 61, 61, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u1060' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1070' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1080' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1090' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u10A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u10B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u10C0' */ 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u10D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u10E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u10F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 18, 18, 18 };
    static sbyte[] mLo17 = new sbyte[256] {
/* '\u1100' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1110' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1120' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1130' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1140' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1150' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 61, 
/* '\u1160' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1170' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1180' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1190' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u11A0' */ 61, 61, 61, 18, 18, 18, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u11B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u11C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u11D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u11E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u11F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo18 = new sbyte[256] {
/* '\u1200' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1210' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1220' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1230' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1240' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 18, 18, 
/* '\u1250' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 18, 61, 61, 61, 61, 18, 18, 
/* '\u1260' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1270' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1280' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 18, 18, 
/* '\u1290' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u12A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u12B0' */ 61, 18, 61, 61, 61, 61, 18, 18, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\u12C0' */ 61, 18, 61, 61, 61, 61, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u12D0' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u12E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u12F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61 };
    static sbyte[] mLo19 = new sbyte[256] {
/* '\u1300' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1310' */ 61, 18, 61, 61, 61, 61, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1320' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1330' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1340' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1350' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 64, 
/* '\u1360' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1370' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1380' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1390' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u13A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u13B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u13C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u13D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u13E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u13F0' */ 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo20 = new sbyte[256] {
/* '\u1400' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1410' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1420' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1430' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1440' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1450' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1460' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1470' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1480' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1490' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u14A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u14B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u14C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u14D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u14E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u14F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61 };
    static sbyte[] mLo22 = new sbyte[256] {
/* '\u1600' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1610' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1620' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1630' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1640' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1650' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1660' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 61, 
/* '\u1670' */ 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1680' */ 66, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1690' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 
/* '\u16A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u16B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u16C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u16D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u16E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 61, 61, 
/* '\u16F0' */ 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo23 = new sbyte[256] {
/* '\u1700' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 
/* '\u1710' */ 61, 61, 64, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1720' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1730' */ 61, 61, 64, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1740' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1750' */ 61, 61, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1760' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 
/* '\u1770' */ 61, 18, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1780' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1790' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u17A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u17B0' */ 61, 61, 61, 61, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u17C0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u17D0' */ 64, 64, 64, 64, 18, 18, 18, 61, 18, 18, 18, 18, 61, 64, 18, 18, 
/* '\u17E0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u17F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo24 = new sbyte[256] {
/* '\u1800' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 64, 64, 64, 66, 18, 
/* '\u1810' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u1820' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1830' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1840' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1850' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1860' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1870' */ 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1880' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1890' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u18A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 64, 18, 18, 18, 18, 18, 18, 
/* '\u18B0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u18C0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u18D0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u18E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u18F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo25 = new sbyte[256] {
/* '\u1900' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1910' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 
/* '\u1920' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 
/* '\u1930' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 
/* '\u1940' */ 18, 18, 18, 18, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u1950' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1960' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\u1970' */ 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1980' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1990' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u19A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 
/* '\u19B0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u19C0' */ 64, 61, 61, 61, 61, 61, 61, 61, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u19D0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u19E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u19F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo26 = new sbyte[256] {
/* '\u1A00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1A10' */ 61, 61, 61, 61, 61, 61, 61, 64, 64, 64, 64, 64, 18, 18, 18, 18, 
/* '\u1A20' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1A30' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1A40' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1A50' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1A60' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1A70' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1A80' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1A90' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1AA0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1AB0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1AC0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1AD0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1AE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1AF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo27 = new sbyte[256] {
/* '\u1B00' */ 64, 64, 64, 64, 64, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1B10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1B20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1B30' */ 61, 61, 61, 61, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u1B40' */ 64, 64, 64, 64, 64, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 
/* '\u1B50' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\u1B60' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 64, 64, 64, 64, 64, 
/* '\u1B70' */ 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1B80' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1B90' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1BA0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1BB0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1BC0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1BD0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1BE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1BF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo29 = new sbyte[256] {
/* '\u1D00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1D10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1D20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1D30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1D40' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1D50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1D60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1D70' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1D80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1D90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1DA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1DB0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1DC0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 
/* '\u1DD0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1DE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u1DF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 64, 64 };
    static sbyte[] mLo30 = new sbyte[256] {
/* '\u1E00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1E10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1E20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1E30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1E40' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1E50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1E60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1E70' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1E80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1E90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 
/* '\u1EA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1EB0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1EC0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1ED0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1EE0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1EF0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo31 = new sbyte[256] {
/* '\u1F00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1F10' */ 61, 61, 61, 61, 61, 61, 18, 18, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\u1F20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1F30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1F40' */ 61, 61, 61, 61, 61, 61, 18, 18, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\u1F50' */ 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 18, 61, 18, 61, 18, 61, 
/* '\u1F60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1F70' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\u1F80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1F90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1FA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u1FB0' */ 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 18, 61, 18, 
/* '\u1FC0' */ 18, 18, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 
/* '\u1FD0' */ 61, 61, 61, 61, 18, 18, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 
/* '\u1FE0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 
/* '\u1FF0' */ 18, 18, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18 };
    static sbyte[] mLo32 = new sbyte[256] {
/* '\u2000' */ 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 18, 65, 65, 18, 18, 
/* '\u2010' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2020' */ 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 18, 18, 18, 18, 18, 66, 
/* '\u2030' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 64, 
/* '\u2040' */ 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2050' */ 18, 18, 18, 18, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 66, 
/* '\u2060' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2070' */ 18, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 
/* '\u2080' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2090' */ 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u20A0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u20B0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u20C0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u20D0' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 
/* '\u20E0' */ 18, 64, 18, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\u20F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo33 = new sbyte[256] {
/* '\u2100' */ 18, 18, 61, 18, 18, 18, 18, 61, 18, 18, 61, 61, 61, 61, 61, 61, 
/* '\u2110' */ 61, 61, 61, 61, 18, 61, 18, 18, 18, 61, 61, 61, 61, 61, 18, 18, 
/* '\u2120' */ 18, 18, 18, 18, 61, 18, 61, 18, 61, 18, 61, 61, 61, 61, 18, 61, 
/* '\u2130' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 61, 61, 61, 61, 
/* '\u2140' */ 18, 18, 18, 18, 18, 61, 61, 61, 61, 61, 18, 18, 18, 18, 61, 18, 
/* '\u2150' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2160' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2170' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2180' */ 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2190' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u21A0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u21B0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u21C0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u21D0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u21E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u21F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo44 = new sbyte[256] {
/* '\u2C00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2C10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2C20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\u2C30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2C40' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2C50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\u2C60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 
/* '\u2C70' */ 18, 18, 18, 18, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2C80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2C90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2CA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2CB0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2CC0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2CD0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2CE0' */ 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2CF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo45 = new sbyte[256] {
/* '\u2D00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2D10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2D20' */ 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2D30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2D40' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2D50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2D60' */ 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 
/* '\u2D70' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2D80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u2D90' */ 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2DA0' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\u2DB0' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\u2DC0' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\u2DD0' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\u2DE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u2DF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo48 = new sbyte[256] {
/* '\u3000' */ 66, 18, 18, 18, 18, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u3010' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u3020' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 64, 64, 64, 64, 64, 64, 
/* '\u3030' */ 18, 61, 61, 61, 61, 61, 18, 18, 61, 61, 61, 61, 61, 18, 18, 18, 
/* '\u3040' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3050' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3060' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3070' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3080' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3090' */ 61, 61, 61, 61, 61, 61, 61, 18, 18, 64, 64, 18, 18, 61, 61, 61, 
/* '\u30A0' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u30B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u30C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u30D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u30E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u30F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61 };
    static sbyte[] mLo49 = new sbyte[256] {
/* '\u3100' */ 18, 18, 18, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3110' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3120' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 
/* '\u3130' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3140' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3150' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3160' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3170' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u3180' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\u3190' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u31A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u31B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u31C0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u31D0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u31E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u31F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61 };
    static sbyte[] mLo77 = new sbyte[256] {
/* '\u4D00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4D10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4D20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4D30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4D40' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4D50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4D60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4D70' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4D80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4D90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4DA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u4DB0' */ 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u4DC0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u4DD0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u4DE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u4DF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo159 = new sbyte[256] {
/* '\u9F00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9F10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9F20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9F30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9F40' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9F50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9F60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9F70' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9F80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9F90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9FA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\u9FB0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 
/* '\u9FC0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u9FD0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u9FE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\u9FF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo164 = new sbyte[256] {
/* '\uA400' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA410' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA420' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA430' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA440' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA450' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA460' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA470' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA480' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 
/* '\uA490' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA4A0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA4B0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA4C0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA4D0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA4E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA4F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo167 = new sbyte[256] {
/* '\uA700' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA710' */ 18, 18, 18, 18, 18, 18, 18, 61, 61, 61, 61, 18, 18, 18, 18, 18, 
/* '\uA720' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA730' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA740' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA750' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA760' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA770' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA780' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA790' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA7A0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA7B0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA7C0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA7D0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA7E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA7F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo168 = new sbyte[256] {
/* '\uA800' */ 61, 61, 64, 61, 61, 61, 64, 61, 61, 61, 61, 64, 61, 61, 61, 61, 
/* '\uA810' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA820' */ 61, 61, 61, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA830' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA840' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA850' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA860' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uA870' */ 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA880' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA890' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA8A0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA8B0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA8C0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA8D0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA8E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uA8F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo215 = new sbyte[256] {
/* '\uD700' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD710' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD720' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD730' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD740' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD750' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD760' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD770' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD780' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD790' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uD7A0' */ 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uD7B0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uD7C0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uD7D0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uD7E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uD7F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo250 = new sbyte[256] {
/* '\uFA00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFA10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFA20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\uFA30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFA40' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFA50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFA60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 
/* '\uFA70' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFA80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFA90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFAA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFAB0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFAC0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFAD0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 
/* '\uFAE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFAF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mLo251 = new sbyte[256] {
/* '\uFB00' */ 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFB10' */ 18, 18, 18, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 61, 64, 61, 
/* '\uFB20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\uFB30' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 18, 61, 18, 
/* '\uFB40' */ 61, 61, 18, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFB50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFB60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFB70' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFB80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFB90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFBA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFBB0' */ 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFBC0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFBD0' */ 18, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFBE0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFBF0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61 };
    static sbyte[] mLo253 = new sbyte[256] {
/* '\uFD00' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFD10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFD20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFD30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\uFD40' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFD50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFD60' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFD70' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFD80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFD90' */ 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFDA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFDB0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFDC0' */ 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFDD0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFDE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFDF0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18 };
    static sbyte[] mLo254 = new sbyte[256] {
/* '\uFE00' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\uFE10' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFE20' */ 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFE30' */ 18, 18, 18, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFE40' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 64, 64, 64, 
/* '\uFE50' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFE60' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFE70' */ 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFE80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFE90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFEA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFEB0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFEC0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFED0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFEE0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFEF0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18 };
    static sbyte[] mLo255 = new sbyte[256] {
/* '\uFF00' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFF10' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 
/* '\uFF20' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFF30' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 64, 
/* '\uFF40' */ 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFF50' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 
/* '\uFF60' */ 18, 18, 18, 18, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFF70' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFF80' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFF90' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFFA0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\uFFB0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\uFFC0' */ 18, 18, 61, 61, 61, 61, 61, 61, 18, 18, 61, 61, 61, 61, 61, 61, 
/* '\uFFD0' */ 18, 18, 61, 61, 61, 61, 61, 61, 18, 18, 61, 61, 61, 18, 18, 18, 
/* '\uFFE0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\uFFF0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };

    static sbyte[][] map = new sbyte[256][] {
/* '\u00xx' */ mLo0, mLo1, mLo2, mLo3, mLo4, mLo5, mLo6, mLo7, mLo8, mLo9, mLo10, mLo11, mLo12, mLo13, mLo14, mLo15, 
/* '\u10xx' */ mLo16, mLo17, mLo18, mLo19, mLo20, mLo1, mLo22, mLo23, mLo24, mLo25, mLo26, mLo27, mLo8, mLo29, mLo30, mLo31, 
/* '\u20xx' */ mLo32, mLo33, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo44, mLo45, mLo8, mLo8, 
/* '\u30xx' */ mLo48, mLo49, mLo8, mLo8, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u40xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo77, mLo1, mLo1, 
/* '\u50xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u60xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u70xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u80xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u90xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo159, 
/* '\uA0xx' */ mLo1, mLo1, mLo1, mLo1, mLo164, mLo8, mLo8, mLo167, mLo168, mLo8, mLo8, mLo8, mLo1, mLo1, mLo1, mLo1, 
/* '\uB0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\uC0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\uD0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo215, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, 
/* '\uE0xx' */ mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, 
/* '\uF0xx' */ mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo1, mLo250, mLo251, mLo1, mLo253, mLo254, mLo255};

#endregion

#region CompressedCharacterMap
    //
    // There are 67 equivalence classes
    // There are 30 character sequence regions
    // There are 8 tables, 1526 entries
    // There are 22 runs, 0 singletons
    // Decision tree depth is 5
    //
    static sbyte[] mapC0 = new sbyte[373] {
/* '\U00010000' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 
/* '\U00010010' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010020' */ 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010030' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 18, 61, 
/* '\U00010040' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\U00010050' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\U00010060' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010070' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010080' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010090' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U000100A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U000100B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U000100C0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U000100D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U000100E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U000100F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 
/* '\U00010100' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010110' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010120' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010130' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010140' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010150' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010160' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010170' */ 61, 61, 61, 61, 61 };
    static sbyte[] mapC2 = new sbyte[256] {
/* '\U00010300' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010310' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\U00010320' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010330' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010340' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 
/* '\U00010350' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010360' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010370' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U00010380' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010390' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 18, 
/* '\U000103A0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U000103B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U000103C0' */ 61, 61, 61, 61, 18, 18, 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U000103D0' */ 18, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U000103E0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U000103F0' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
    static sbyte[] mapC4 = new sbyte[12] {
/* '\U0001049E' */ 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 };
    static sbyte[] mapC6 = new sbyte[64] {
/* '\U00010800' */ 61, 61, 61, 61, 61, 61, 18, 18, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\U00010810' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010820' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010830' */ 61, 61, 61, 61, 61, 61, 18, 61, 61, 18, 18, 18, 61, 18, 18, 61 };
    static sbyte[] mapC10 = new sbyte[64] {
/* '\U00010A00' */ 61, 64, 64, 64, 18, 64, 64, 18, 18, 18, 18, 18, 64, 64, 64, 64, 
/* '\U00010A10' */ 61, 61, 61, 61, 18, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010A20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U00010A30' */ 61, 61, 61, 61, 18, 18, 18, 18, 64, 64, 64, 18, 18, 18, 18, 64 };
    static sbyte[] mapC16 = new sbyte[73] {
/* '\U0001D165' */ 64, 64, 64, 64, 64, 18, 18, 18, 64, 64, 64, 64, 64, 64, 18, 18, 
/* '\U0001D175' */ 18, 18, 18, 18, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 18, 18, 
/* '\U0001D185' */ 64, 64, 64, 64, 64, 64, 64, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U0001D195' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/* '\U0001D1A5' */ 18, 18, 18, 18, 18, 64, 64, 64, 64 };
    static sbyte[] mapC20 = new sbyte[338] {
/* '\U0001D400' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D410' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D420' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D430' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D440' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D450' */ 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D460' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D470' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D480' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D490' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 
/* '\U0001D4A0' */ 18, 18, 61, 18, 18, 61, 61, 18, 18, 61, 61, 61, 61, 18, 61, 61, 
/* '\U0001D4B0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 18, 61, 61, 61, 
/* '\U0001D4C0' */ 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D4D0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D4E0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D4F0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D500' */ 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 18, 18, 61, 61, 61, 
/* '\U0001D510' */ 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 
/* '\U0001D520' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D530' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 18, 
/* '\U0001D540' */ 61, 61, 61, 61, 61, 18, 61, 18, 18, 18, 61, 61, 61, 61, 61, 61, 
/* '\U0001D550' */ 61, 18 };
    static sbyte[] mapC22 = new sbyte[346] {
/* '\U0001D6A6' */ 18, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D6B6' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 
/* '\U0001D6C6' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D6D6' */ 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D6E6' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D6F6' */ 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D706' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\U0001D716' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D726' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 
/* '\U0001D736' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D746' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\U0001D756' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D766' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 
/* '\U0001D776' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D786' */ 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D796' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D7A6' */ 61, 61, 61, 18, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/* '\U0001D7B6' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18, 61, 61, 
/* '\U0001D7C6' */ 61, 61, 61, 61, 61, 61, 18, 18, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\U0001D7D6' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\U0001D7E6' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
/* '\U0001D7F6' */ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 };

    static sbyte MapC(int code)
    { // '\U00010000' <= code <= '\U0010FFFF'
      if (code < 74851) // '\U00010000' <= code <= '\U00012462'
        if (code < 67648) // '\U00010000' <= code <= '\U0001083F'
          if (code < 66560) // '\U00010000' <= code <= '\U000103FF'
            if (code < 65909) // '\U00010000' <= code <= '\U00010174'
              return mapC0[code - 65536];
            else // '\U00010175' <= code <= '\U000103FF'
              if (code < 66304) // '\U00010175' <= code <= '\U000102FF'
                return (sbyte)18;
              else // '\U00010300' <= code <= '\U000103FF'
                return mapC2[code - 66304];
          else // '\U00010400' <= code <= '\U0001083F'
            if (code < 66730) // '\U00010400' <= code <= '\U000104A9'
              if (code < 66718) // '\U00010400' <= code <= '\U0001049D'
                return (sbyte)61;
              else // '\U0001049E' <= code <= '\U000104A9'
                return mapC4[code - 66718];
            else // '\U000104AA' <= code <= '\U0001083F'
              if (code < 67584) // '\U000104AA' <= code <= '\U000107FF'
                return (sbyte)18;
              else // '\U00010800' <= code <= '\U0001083F'
                return mapC6[code - 67584];
        else // '\U00010840' <= code <= '\U00012462'
          if (code < 68160) // '\U00010840' <= code <= '\U00010A3F'
            if (code < 67862) // '\U00010840' <= code <= '\U00010915'
              if (code < 67840) // '\U00010840' <= code <= '\U000108FF'
                return (sbyte)18;
              else // '\U00010900' <= code <= '\U00010915'
                return (sbyte)61;
            else // '\U00010916' <= code <= '\U00010A3F'
              if (code < 68096) // '\U00010916' <= code <= '\U000109FF'
                return (sbyte)18;
              else // '\U00010A00' <= code <= '\U00010A3F'
                return mapC10[code - 68096];
          else // '\U00010A40' <= code <= '\U00012462'
            if (code < 74607) // '\U00010A40' <= code <= '\U0001236E'
              if (code < 73728) // '\U00010A40' <= code <= '\U00011FFF'
                return (sbyte)18;
              else // '\U00012000' <= code <= '\U0001236E'
                return (sbyte)61;
            else // '\U0001236F' <= code <= '\U00012462'
              if (code < 74752) // '\U0001236F' <= code <= '\U000123FF'
                return (sbyte)18;
              else // '\U00012400' <= code <= '\U00012462'
                return (sbyte)61;
      else // '\U00012463' <= code <= '\U0010FFFF'
        if (code < 120486) // '\U00012463' <= code <= '\U0001D6A5'
          if (code < 119362) // '\U00012463' <= code <= '\U0001D241'
            if (code < 119141) // '\U00012463' <= code <= '\U0001D164'
              return (sbyte)18;
            else // '\U0001D165' <= code <= '\U0001D241'
              if (code < 119214) // '\U0001D165' <= code <= '\U0001D1AD'
                return mapC16[code - 119141];
              else // '\U0001D1AE' <= code <= '\U0001D241'
                return (sbyte)18;
          else // '\U0001D242' <= code <= '\U0001D6A5'
            if (code < 119808) // '\U0001D242' <= code <= '\U0001D3FF'
              if (code < 119365) // '\U0001D242' <= code <= '\U0001D244'
                return (sbyte)64;
              else // '\U0001D245' <= code <= '\U0001D3FF'
                return (sbyte)18;
            else // '\U0001D400' <= code <= '\U0001D6A5'
              if (code < 120146) // '\U0001D400' <= code <= '\U0001D551'
                return mapC20[code - 119808];
              else // '\U0001D552' <= code <= '\U0001D6A5'
                return (sbyte)61;
        else // '\U0001D6A6' <= code <= '\U0010FFFF'
          if (code < 194560) // '\U0001D6A6' <= code <= '\U0002F7FF'
            if (code < 131072) // '\U0001D6A6' <= code <= '\U0001FFFF'
              if (code < 120832) // '\U0001D6A6' <= code <= '\U0001D7FF'
                return mapC22[code - 120486];
              else // '\U0001D800' <= code <= '\U0001FFFF'
                return (sbyte)18;
            else // '\U00020000' <= code <= '\U0002F7FF'
              if (code < 173783) // '\U00020000' <= code <= '\U0002A6D6'
                return (sbyte)61;
              else // '\U0002A6D7' <= code <= '\U0002F7FF'
                return (sbyte)18;
          else // '\U0002F800' <= code <= '\U0010FFFF'
            if (code < 917760) // '\U0002F800' <= code <= '\U000E00FF'
              if (code < 195102) // '\U0002F800' <= code <= '\U0002FA1D'
                return (sbyte)61;
              else // '\U0002FA1E' <= code <= '\U000E00FF'
                return (sbyte)18;
            else // '\U000E0100' <= code <= '\U0010FFFF'
              if (code < 918000) // '\U000E0100' <= code <= '\U000E01EF'
                return (sbyte)64;
              else // '\U000E01F0' <= code <= '\U0010FFFF'
                return (sbyte)18;
    }
#endregion


    static sbyte Map(int code)
    { 
        if (code <= 65535)
            return map[code / 256][code % 256];
        else
            return MapC(code);
    }

    static Table[] NxS = new Table[314] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "\u2028"
      new Table(0, 21, -1, new short[] {1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1}),
/* NxS[   2] */ // Shortest string "/"
      new Table(37, 34, -1, new short[] {270, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 269, -1, 299}),
/* NxS[   3] */ // Shortest string ">"
      new Table(37, 33, -1, new short[] {265, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 264}),
/* NxS[   4] */ // Shortest string "*"
      new Table(37, 1, -1, new short[] {263}),
/* NxS[   5] */ // Shortest string "\\"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[   6] */ // Shortest string "<"
      new Table(5, 33, -1, new short[] {260, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 261}),
/* NxS[   7] */ // Shortest string "0"
      new Table(60, 23, -1, new short[] {298, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 296, -1, -1, -1, -1, 257, 296, -1, -1, 
          298}),
/* NxS[   8] */ // Shortest string "1"
      new Table(6, 7, -1, new short[] {296, -1, -1, 8, 8, 257, 
          296}),
/* NxS[   9] */ // Shortest string "."
      new Table(9, 2, -1, new short[] {257, 257}),
/* NxS[  10] */ // Shortest string "e"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 241, 
          5, 242, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 243, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  11] */ // Shortest string "+"
      new Table(13, 25, -1, new short[] {239, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 240}),
/* NxS[  12] */ // Shortest string "-"
      new Table(14, 24, -1, new short[] {237, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 238}),
/* NxS[  13] */ // Shortest string "\""
      new Table(0, 21, 287, new short[] {233, 287, 287, 287, 288, 289, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 234, 287, 233, 233}),
/* NxS[  14] */ new Table(0, 0, -1, null), // Shortest string "\0"
/* NxS[  15] */ // Shortest string "'"
      new Table(0, 22, 278, new short[] {233, 278, 278, 278, 279, 280, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 233, 233, 234}),
/* NxS[  16] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  17] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  18] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  19] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  20] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  21] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  22] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  23] */ new Table(0, 0, -1, null), // Shortest string ":"
/* NxS[  24] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  25] */ // Shortest string "%"
      new Table(37, 1, -1, new short[] {232}),
/* NxS[  26] */ // Shortest string "&"
      new Table(32, 6, -1, new short[] {230, -1, -1, -1, -1, 231}),
/* NxS[  27] */ // Shortest string "|"
      new Table(33, 5, -1, new short[] {228, -1, -1, -1, 229}),
/* NxS[  28] */ // Shortest string "^"
      new Table(37, 1, -1, new short[] {227}),
/* NxS[  29] */ // Shortest string "!"
      new Table(37, 1, -1, new short[] {225}),
/* NxS[  30] */ new Table(0, 0, -1, null), // Shortest string "~"
/* NxS[  31] */ // Shortest string "="
      new Table(37, 33, -1, new short[] {223, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 222}),
/* NxS[  32] */ new Table(0, 0, -1, null), // Shortest string "?"
/* NxS[  33] */ // Shortest string "t"
      new Table(39, 45, -1, new short[] {5, 207, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 208, 5, 5, 5, 209, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  34] */ // Shortest string "r"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 202, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  35] */ // Shortest string "f"
      new Table(39, 45, -1, new short[] {5, 5, 183, 5, 184, 5, 
          5, 5, 5, 5, 185, 5, 5, 5, 186, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  36] */ // Shortest string "l"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 181, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  37] */ // Shortest string "s"
      new Table(39, 45, -1, new short[] {166, 5, 167, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 168, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 165, -1, -1, 5, 5}),
/* NxS[  38] */ // Shortest string "n"
      new Table(66, 43, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 160, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, 161}),
/* NxS[  39] */ // Shortest string "b"
      new Table(66, 42, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 156}),
/* NxS[  40] */ // Shortest string "w"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 149, 5, 5, 150, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  41] */ // Shortest string "c"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 130, 131, 
          5, 5, 5, 5, 132, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  42] */ // Shortest string "i"
      new Table(39, 45, -1, new short[] {5, 5, 5, 101, 5, 5, 
          5, 102, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 103, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  43] */ // Shortest string "y"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 97, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  44] */ // Shortest string "p"
      new Table(39, 45, -1, new short[] {5, 73, 74, 5, 75, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  45] */ // Shortest string "v"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 68, 5, 
          5, 5, 5, 5, 69, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  46] */ // Shortest string "d"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 52, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 51, -1, -1, 5, 5}),
/* NxS[  47] */ // Shortest string "g"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 49, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  48] */ new Table(0, 0, -1, null), // Shortest string "\t"
/* NxS[  49] */ // Shortest string "ge"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 50}),
/* NxS[  50] */ // Shortest string "get"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  51] */ // Shortest string "de"
      new Table(39, 45, -1, new short[] {5, 5, 5, 53, 5, 54, 
          5, 5, 55, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  52] */ // Shortest string "do"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  53] */ // Shortest string "def"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 64, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  54] */ // Shortest string "del"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 61, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  55] */ // Shortest string "deb"
      new Table(66, 43, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, 56}),
/* NxS[  56] */ // Shortest string "debu"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 57, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  57] */ // Shortest string "debug"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 58, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  58] */ // Shortest string "debugg"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 59, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  59] */ // Shortest string "debugge"
      new Table(66, 42, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 60}),
/* NxS[  60] */ // Shortest string "debugger"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  61] */ // Shortest string "dele"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 62}),
/* NxS[  62] */ // Shortest string "delet"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 63, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  63] */ // Shortest string "delete"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  64] */ // Shortest string "defa"
      new Table(66, 43, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, 65}),
/* NxS[  65] */ // Shortest string "defau"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 66, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  66] */ // Shortest string "defaul"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 67}),
/* NxS[  67] */ // Shortest string "default"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  68] */ // Shortest string "va"
      new Table(66, 42, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 72}),
/* NxS[  69] */ // Shortest string "vo"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 70, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  70] */ // Shortest string "voi"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 71, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  71] */ // Shortest string "void"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  72] */ // Shortest string "var"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  73] */ // Shortest string "pr"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 85, 5, 5, 5, 86, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  74] */ // Shortest string "pu"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 81, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  75] */ // Shortest string "pa"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 76, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  76] */ // Shortest string "pac"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 77, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  77] */ // Shortest string "pack"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 78, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  78] */ // Shortest string "packa"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 79, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  79] */ // Shortest string "packag"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 80, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  80] */ // Shortest string "package"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  81] */ // Shortest string "pub"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 82, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  82] */ // Shortest string "publ"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 83, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  83] */ // Shortest string "publi"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 84, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  84] */ // Shortest string "public"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  85] */ // Shortest string "pro"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 91}),
/* NxS[  86] */ // Shortest string "pri"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 87, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  87] */ // Shortest string "priv"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 88, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  88] */ // Shortest string "priva"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 89}),
/* NxS[  89] */ // Shortest string "privat"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 90, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  90] */ // Shortest string "private"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  91] */ // Shortest string "prot"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 92, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  92] */ // Shortest string "prote"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 93, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  93] */ // Shortest string "protec"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 94}),
/* NxS[  94] */ // Shortest string "protect"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 95, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  95] */ // Shortest string "protecte"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 96, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  96] */ // Shortest string "protected"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  97] */ // Shortest string "yi"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 98, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[  98] */ // Shortest string "yie"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 99, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[  99] */ // Shortest string "yiel"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 100, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 100] */ // Shortest string "yield"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 101] */ // Shortest string "if"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 102] */ // Shortest string "in"
      new Table(39, 45, -1, new short[] {115, 5, 5, 5, 5, 5, 
          116, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 103] */ // Shortest string "im"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 104, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 104] */ // Shortest string "imp"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 105, 
          5, 5, 5, 5, 106, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 105] */ // Shortest string "impl"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 109, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 106] */ // Shortest string "impo"
      new Table(66, 42, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 107}),
/* NxS[ 107] */ // Shortest string "impor"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 108}),
/* NxS[ 108] */ // Shortest string "import"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 109] */ // Shortest string "imple"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 110, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 110] */ // Shortest string "implem"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 111, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 111] */ // Shortest string "impleme"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 112, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 112] */ // Shortest string "implemen"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 113}),
/* NxS[ 113] */ // Shortest string "implement"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          114, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 114] */ // Shortest string "implements"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 115] */ // Shortest string "int"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 124, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 116] */ // Shortest string "ins"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 117}),
/* NxS[ 117] */ // Shortest string "inst"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 118, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 118] */ // Shortest string "insta"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 119, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 119] */ // Shortest string "instan"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 120, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 120] */ // Shortest string "instanc"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 121, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 121] */ // Shortest string "instance"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 122, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 122] */ // Shortest string "instanceo"
      new Table(66, 44, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, 5, 123}),
/* NxS[ 123] */ // Shortest string "instanceof"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 124] */ // Shortest string "inte"
      new Table(66, 42, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 125}),
/* NxS[ 125] */ // Shortest string "inter"
      new Table(66, 44, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, 5, 126}),
/* NxS[ 126] */ // Shortest string "interf"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 127, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 127] */ // Shortest string "interfa"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 128, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 128] */ // Shortest string "interfac"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 129, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 129] */ // Shortest string "interface"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 130] */ // Shortest string "ca"
      new Table(39, 45, -1, new short[] {144, 5, 5, 5, 5, 5, 
          145, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 131] */ // Shortest string "cl"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 141, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 132] */ // Shortest string "co"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 133, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 133] */ // Shortest string "con"
      new Table(39, 45, -1, new short[] {134, 5, 5, 5, 5, 5, 
          135, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 134] */ // Shortest string "cont"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 137, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 135] */ // Shortest string "cons"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 136}),
/* NxS[ 136] */ // Shortest string "const"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 137] */ // Shortest string "conti"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 138, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 138] */ // Shortest string "contin"
      new Table(66, 43, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, 139}),
/* NxS[ 139] */ // Shortest string "continu"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 140, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 140] */ // Shortest string "continue"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 141] */ // Shortest string "cla"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          142, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 142] */ // Shortest string "clas"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 143] */ // Shortest string "class"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 144] */ // Shortest string "cat"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 147, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 145] */ // Shortest string "cas"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 146, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 146] */ // Shortest string "case"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 147] */ // Shortest string "catc"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 148, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 148] */ // Shortest string "catch"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 149] */ // Shortest string "wh"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 153, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 150] */ // Shortest string "wi"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 151}),
/* NxS[ 151] */ // Shortest string "wit"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 152, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 152] */ // Shortest string "with"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 153] */ // Shortest string "whi"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 154, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 154] */ // Shortest string "whil"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 155, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 155] */ // Shortest string "while"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 156] */ // Shortest string "br"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 157, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 157] */ // Shortest string "bre"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 158, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 158] */ // Shortest string "brea"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 159, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 159] */ // Shortest string "break"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 160] */ // Shortest string "ne"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 164, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 161] */ // Shortest string "nu"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 162, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 162] */ // Shortest string "nul"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 163, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 163] */ // Shortest string "null"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 164] */ // Shortest string "new"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 165] */ // Shortest string "se"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 180}),
/* NxS[ 166] */ // Shortest string "st"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 176, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 167] */ // Shortest string "su"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 173, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 168] */ // Shortest string "sw"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 169, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 169] */ // Shortest string "swi"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 170}),
/* NxS[ 170] */ // Shortest string "swit"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 171, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 171] */ // Shortest string "switc"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 172, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 172] */ // Shortest string "switch"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 173] */ // Shortest string "sup"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 174, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 174] */ // Shortest string "supe"
      new Table(66, 42, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 175}),
/* NxS[ 175] */ // Shortest string "super"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 176] */ // Shortest string "sta"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 177}),
/* NxS[ 177] */ // Shortest string "stat"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 178, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 178] */ // Shortest string "stati"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 179, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 179] */ // Shortest string "static"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 180] */ // Shortest string "set"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 181] */ // Shortest string "le"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 182}),
/* NxS[ 182] */ // Shortest string "let"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 183] */ // Shortest string "fu"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 196, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 184] */ // Shortest string "fa"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 193, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 185] */ // Shortest string "fo"
      new Table(66, 42, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 192}),
/* NxS[ 186] */ // Shortest string "fi"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 187, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 187] */ // Shortest string "fin"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 188, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 188] */ // Shortest string "fina"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 189, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 189] */ // Shortest string "final"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 190, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 190] */ // Shortest string "finall"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 191, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 191] */ // Shortest string "finally"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 192] */ // Shortest string "for"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 193] */ // Shortest string "fal"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          194, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 194] */ // Shortest string "fals"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 195, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 195] */ // Shortest string "false"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 196] */ // Shortest string "fun"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 197, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 197] */ // Shortest string "func"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 198}),
/* NxS[ 198] */ // Shortest string "funct"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 199, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 199] */ // Shortest string "functi"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 200, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 200] */ // Shortest string "functio"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 201, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 201] */ // Shortest string "function"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 202] */ // Shortest string "re"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 203}),
/* NxS[ 203] */ // Shortest string "ret"
      new Table(66, 43, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, 204}),
/* NxS[ 204] */ // Shortest string "retu"
      new Table(66, 42, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 205}),
/* NxS[ 205] */ // Shortest string "retur"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 206, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 206] */ // Shortest string "return"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 207] */ // Shortest string "tr"
      new Table(39, 45, -1, new short[] {5, 5, 219, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 220, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 208] */ // Shortest string "th"
      new Table(39, 45, -1, new short[] {5, 214, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 215, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 209] */ // Shortest string "ty"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 210, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 210] */ // Shortest string "typ"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 211, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 211] */ // Shortest string "type"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 212, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 212] */ // Shortest string "typeo"
      new Table(66, 44, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, 5, 213}),
/* NxS[ 213] */ // Shortest string "typeof"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 214] */ // Shortest string "thr"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 217, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 215] */ // Shortest string "thi"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          216, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 216] */ // Shortest string "this"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 217] */ // Shortest string "thro"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 218, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 218] */ // Shortest string "throw"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 219] */ // Shortest string "tru"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 221, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 220] */ // Shortest string "try"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 221] */ // Shortest string "true"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 222] */ new Table(0, 0, -1, null), // Shortest string "=>"
/* NxS[ 223] */ // Shortest string "=="
      new Table(37, 1, -1, new short[] {224}),
/* NxS[ 224] */ new Table(0, 0, -1, null), // Shortest string "==="
/* NxS[ 225] */ // Shortest string "!="
      new Table(37, 1, -1, new short[] {226}),
/* NxS[ 226] */ new Table(0, 0, -1, null), // Shortest string "!=="
/* NxS[ 227] */ new Table(0, 0, -1, null), // Shortest string "^="
/* NxS[ 228] */ new Table(0, 0, -1, null), // Shortest string "||"
/* NxS[ 229] */ new Table(0, 0, -1, null), // Shortest string "|="
/* NxS[ 230] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[ 231] */ new Table(0, 0, -1, null), // Shortest string "&="
/* NxS[ 232] */ new Table(0, 0, -1, null), // Shortest string "%="
/* NxS[ 233] */ new Table(0, 0, -1, null), // Shortest string "\"\u2028"
/* NxS[ 234] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[ 235] */ // Shortest string "'<<EOF>>"
      new Table(0, 22, 278, new short[] {233, 278, 278, 278, 279, 280, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 233, 233, 234}),
/* NxS[ 236] */ // Shortest string "\"<<EOF>>"
      new Table(0, 21, 287, new short[] {233, 287, 287, 287, 288, 289, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 234, 287, 233, 233}),
/* NxS[ 237] */ new Table(0, 0, -1, null), // Shortest string "--"
/* NxS[ 238] */ new Table(0, 0, -1, null), // Shortest string "-="
/* NxS[ 239] */ new Table(0, 0, -1, null), // Shortest string "++"
/* NxS[ 240] */ new Table(0, 0, -1, null), // Shortest string "+="
/* NxS[ 241] */ // Shortest string "el"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          255, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 242] */ // Shortest string "en"
      new Table(66, 43, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, 253}),
/* NxS[ 243] */ // Shortest string "ex"
      new Table(39, 45, -1, new short[] {244, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 245, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 244] */ // Shortest string "ext"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 249, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 245] */ // Shortest string "exp"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 246, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 246] */ // Shortest string "expo"
      new Table(66, 42, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 247}),
/* NxS[ 247] */ // Shortest string "expor"
      new Table(66, 41, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 248}),
/* NxS[ 248] */ // Shortest string "export"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 249] */ // Shortest string "exte"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 250, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 250] */ // Shortest string "exten"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 251, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 251] */ // Shortest string "extend"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          252, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 252] */ // Shortest string "extends"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 253] */ // Shortest string "enu"
      new Table(39, 45, -1, new short[] {5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 254, 5, 
          5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 
          5, -1, 5, -1, -1, 5, 5}),
/* NxS[ 254] */ // Shortest string "enum"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 255] */ // Shortest string "els"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 256, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 256] */ // Shortest string "else"
      new Table(66, 40, 5, new short[] {-1, -1, -1, -1, -1, 5, 
          -1, 5, 5, 5, 5, 5, -1, 5, -1, -1, 5, 5, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 257] */ // Shortest string "0."
      new Table(6, 7, -1, new short[] {296, -1, -1, 257, 257, -1, 
          296}),
/* NxS[ 258] */ // Shortest string "0E0"
      new Table(9, 2, -1, new short[] {258, 258}),
/* NxS[ 259] */ // Shortest string "0XE"
      new Table(42, 42, -1, new short[] {259, 259, -1, -1, -1, 259, 
          -1, -1, -1, -1, 259, -1, -1, -1, -1, 259, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 259, -1, 259, 259, 259, -1, 259, 
          -1, -1, -1, 259}),
/* NxS[ 260] */ // Shortest string "<<"
      new Table(37, 1, -1, new short[] {262}),
/* NxS[ 261] */ new Table(0, 0, -1, null), // Shortest string "<="
/* NxS[ 262] */ new Table(0, 0, -1, null), // Shortest string "<<="
/* NxS[ 263] */ new Table(0, 0, -1, null), // Shortest string "*="
/* NxS[ 264] */ // Shortest string ">>"
      new Table(37, 33, -1, new short[] {267, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 266}),
/* NxS[ 265] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[ 266] */ // Shortest string ">>>"
      new Table(37, 1, -1, new short[] {268}),
/* NxS[ 267] */ new Table(0, 0, -1, null), // Shortest string ">>="
/* NxS[ 268] */ new Table(0, 0, -1, null), // Shortest string ">>>="
/* NxS[ 269] */ // Shortest string "//"
      new Table(0, 21, 269, new short[] {-1, 269, 269, 269, 269, 269, 
          269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, -1, -1}),
/* NxS[ 270] */ new Table(0, 0, -1, null), // Shortest string "/="
/* NxS[ 271] */ new Table(0, 0, -1, null), // Shortest string "/*<<EOF>>"
/* NxS[ 272] */ new Table(0, 0, -1, null), // Shortest string "/*\u2028*/"
/* NxS[ 273] */ new Table(0, 0, -1, null), // Shortest string "/**/"
/* NxS[ 274] */ new Table(0, 0, -1, null), // Shortest string ">"
/* NxS[ 275] */ // Shortest string "/"
      new Table(0, 25, 310, new short[] {-1, -1, 310, -1, 313, 310, 
          310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, -1, -1, 310, 
          310, 310, 311}),
/* NxS[ 276] */ // Shortest string "/>/"
      new Table(66, 40, 276, new short[] {-1, -1, -1, -1, -1, 276, 
          -1, 276, 276, 276, 276, 276, -1, 276, -1, -1, 276, 276, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1}),
/* NxS[ 277] */ // Shortest string ""
      new Table(64, 62, 5, new short[] {14, 14, 48, 1, 2, 3, 
          4, 5, 6, 5, 5, 5, 7, 8, 9, 10, 11, 12, 5, 5, 13, 14, 
          1, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
          29, 30, 31, 32, 33, 34, 5, 35, 5, 36, 37, 38, 39, 5, 5, 5, 
          40, 41, 42, 43, 44, 45, 46, 47}),
/* NxS[ 278] */ // Shortest string "'/"
      new Table(0, 22, 278, new short[] {233, 278, 278, 278, 279, 280, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 233, 233, 234}),
/* NxS[ 279] */ // Shortest string "'\\"
      new Table(0, 1, 278, new short[] {286}),
/* NxS[ 280] */ // Shortest string "'<"
      new Table(0, 22, 278, new short[] {233, 278, 278, 278, 279, 281, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 233, 233, 234}),
/* NxS[ 281] */ // Shortest string "'<<"
      new Table(0, 22, 278, new short[] {233, 278, 278, 278, 279, 281, 
          282, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 233, 233, 234}),
/* NxS[ 282] */ // Shortest string "'<<E"
      new Table(0, 22, 278, new short[] {233, 278, 278, 278, 279, 280, 
          278, 283, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 233, 233, 234}),
/* NxS[ 283] */ // Shortest string "'<<EO"
      new Table(0, 22, 278, new short[] {233, 278, 278, 278, 279, 280, 
          278, 278, 284, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 233, 233, 234}),
/* NxS[ 284] */ // Shortest string "'<<EOF"
      new Table(0, 22, 278, new short[] {233, 278, 285, 278, 279, 280, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 233, 233, 234}),
/* NxS[ 285] */ // Shortest string "'<<EOF>"
      new Table(0, 22, 278, new short[] {233, 278, 235, 278, 279, 280, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 233, 233, 234}),
/* NxS[ 286] */ // Shortest string ""
      new Table(0, 67, 278, new short[] {278, 278, 278, 278, 278, 278, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 
          278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278}),
/* NxS[ 287] */ // Shortest string "\"/"
      new Table(0, 21, 287, new short[] {233, 287, 287, 287, 288, 289, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 234, 287, 233, 233}),
/* NxS[ 288] */ // Shortest string "\"\\"
      new Table(0, 1, 287, new short[] {295}),
/* NxS[ 289] */ // Shortest string "\"<"
      new Table(0, 21, 287, new short[] {233, 287, 287, 287, 288, 290, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 234, 287, 233, 233}),
/* NxS[ 290] */ // Shortest string "\"<<"
      new Table(0, 21, 287, new short[] {233, 287, 287, 287, 288, 290, 
          291, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 234, 287, 233, 233}),
/* NxS[ 291] */ // Shortest string "\"<<E"
      new Table(0, 21, 287, new short[] {233, 287, 287, 287, 288, 289, 
          287, 292, 287, 287, 287, 287, 287, 287, 287, 287, 287, 234, 287, 233, 233}),
/* NxS[ 292] */ // Shortest string "\"<<EO"
      new Table(0, 21, 287, new short[] {233, 287, 287, 287, 288, 289, 
          287, 287, 293, 287, 287, 287, 287, 287, 287, 287, 287, 234, 287, 233, 233}),
/* NxS[ 293] */ // Shortest string "\"<<EOF"
      new Table(0, 21, 287, new short[] {233, 287, 294, 287, 288, 289, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 234, 287, 233, 233}),
/* NxS[ 294] */ // Shortest string "\"<<EOF>"
      new Table(0, 21, 287, new short[] {233, 287, 236, 287, 288, 289, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 234, 287, 233, 233}),
/* NxS[ 295] */ // Shortest string ""
      new Table(0, 67, 287, new short[] {287, 287, 287, 287, 287, 287, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 
          287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287}),
/* NxS[ 296] */ // Shortest string "0E"
      new Table(9, 6, -1, new short[] {258, 258, -1, -1, 297, 297}),
/* NxS[ 297] */ // Shortest string "0E+"
      new Table(9, 2, -1, new short[] {258, 258}),
/* NxS[ 298] */ // Shortest string "0X"
      new Table(42, 42, -1, new short[] {259, 259, -1, -1, -1, 259, 
          -1, -1, -1, -1, 259, -1, -1, -1, -1, 259, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 259, -1, 259, 259, 259, -1, 259, 
          -1, -1, -1, 259}),
/* NxS[ 299] */ // Shortest string "/*"
      new Table(0, 21, 299, new short[] {300, 299, -1, 301, 299, 302, 
          -1, -1, -1, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 300}),
/* NxS[ 300] */ // Shortest string "/*\u2028"
      new Table(2, 7, 300, new short[] {-1, 308, 300, 302, -1, -1, 
          -1}),
/* NxS[ 301] */ // Shortest string "/**"
      new Table(0, 21, 299, new short[] {300, 273, -1, 301, 299, -1, 
          -1, -1, -1, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 300}),
/* NxS[ 302] */ // Shortest string "/*<"
      new Table(5, 1, -1, new short[] {303}),
/* NxS[ 303] */ // Shortest string "/*<<"
      new Table(6, 1, -1, new short[] {304}),
/* NxS[ 304] */ // Shortest string "/*<<E"
      new Table(7, 1, -1, new short[] {305}),
/* NxS[ 305] */ // Shortest string "/*<<EO"
      new Table(8, 1, -1, new short[] {306}),
/* NxS[ 306] */ // Shortest string "/*<<EOF"
      new Table(2, 1, -1, new short[] {307}),
/* NxS[ 307] */ // Shortest string "/*<<EOF>"
      new Table(2, 1, -1, new short[] {271}),
/* NxS[ 308] */ // Shortest string "/*\u2028*"
      new Table(1, 8, 300, new short[] {272, -1, 308, 300, -1, -1, 
          -1, -1}),
/* NxS[ 309] */ // Shortest string ""
      new Table(1, 20, 274, new short[] {275, 274, 274, 274, 274, 274, 
          274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, -1}),
/* NxS[ 310] */ // Shortest string "/>"
      new Table(0, 25, 310, new short[] {-1, 276, 310, 310, 313, 310, 
          310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, -1, -1, 310, 
          310, 310, 311}),
/* NxS[ 311] */ // Shortest string "/["
      new Table(0, 26, 311, new short[] {-1, 311, 311, 311, 312, 311, 
          311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, -1, -1, 311, 
          311, 311, 311, 310}),
/* NxS[ 312] */ // Shortest string "/[\\"
      new Table(0, 21, 311, new short[] {-1, 311, 311, 311, 311, 311, 
          311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, -1, -1}),
/* NxS[ 313] */ // Shortest string "/\\"
      new Table(0, 21, 310, new short[] {-1, 310, 310, 310, 310, 310, 
          310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, -1, -1}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = Map(code) - NxS[state].min;
            if (idx < 0) idx += 67;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal Scanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     internal Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    Result rslt = Result.noMatch;
#endif // BACKUP
#if LEFTANCHORS
                    for (;;)
                    {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) 
                            break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();
                    
                    while ((next = NextState()) > eofNum) // Exit for goStart AND for eofNum
#if BACKUP
                        if (state <= maxAccept && next > maxAccept) // need to prepare backup data
                        {
                            // ctx is an object. The fields may be 
                            // mutated by the call to Recurse2.
                            // On return the data in ctx is the
                            // *latest* accept state that was found.
                            
                            rslt = Recurse2(ref ctx, next);
                            if (rslt == Result.noMatch) 
                                RestoreStateAndPos(ref ctx);
                            break;
                        }
                        else
#endif // BACKUP
                        {
                            state = next;
                            GetCode();
                        }
                    if (state <= maxAccept) 
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 277:
_isLineTerminator = true; _isValidAutoSemicolonPosition = true; if (_isRestricted) return Token(';');
                    break;
            }
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '{newline}+',	Shortest string "\u2028"
_lastNumeric = false; _isLineTerminator = true; if (_isRestricted) return Token(';');
            break;
        case 2: // Recognized '"/"',	Shortest string "/"
return Token('/');
            break;
        case 3: // Recognized '">"',	Shortest string ">"
return Token('>');
            break;
        case 4: // Recognized '"*"',	Shortest string "*"
return Token('*');
            break;
        case 5: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "\\"
        case 10: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "e"
        case 33: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "t"
        case 34: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "r"
        case 35: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "f"
        case 36: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "l"
        case 37: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "s"
        case 38: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "n"
        case 39: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "b"
        case 40: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "w"
        case 41: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "c"
        case 42: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "i"
        case 43: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "y"
        case 44: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "p"
        case 45: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "v"
        case 46: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "d"
        case 47: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "g"
        case 49: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "ge"
        case 51: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "de"
        case 53: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "def"
        case 54: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "del"
        case 55: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "deb"
        case 56: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "debu"
        case 57: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "debug"
        case 58: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "debugg"
        case 59: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "debugge"
        case 61: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "dele"
        case 62: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "delet"
        case 64: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "defa"
        case 65: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "defau"
        case 66: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "defaul"
        case 68: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "va"
        case 69: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "vo"
        case 70: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "voi"
        case 73: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "pr"
        case 74: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "pu"
        case 75: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "pa"
        case 76: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "pac"
        case 77: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "pack"
        case 78: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "packa"
        case 79: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "packag"
        case 81: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "pub"
        case 82: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "publ"
        case 83: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "publi"
        case 85: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "pro"
        case 86: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "pri"
        case 87: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "priv"
        case 88: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "priva"
        case 89: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "privat"
        case 91: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "prot"
        case 92: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "prote"
        case 93: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "protec"
        case 94: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "protect"
        case 95: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "protecte"
        case 97: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "yi"
        case 98: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "yie"
        case 99: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "yiel"
        case 103: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "im"
        case 104: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "imp"
        case 105: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "impl"
        case 106: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "impo"
        case 107: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "impor"
        case 109: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "imple"
        case 110: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "implem"
        case 111: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "impleme"
        case 112: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "implemen"
        case 113: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "implement"
        case 115: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "int"
        case 116: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "ins"
        case 117: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "inst"
        case 118: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "insta"
        case 119: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "instan"
        case 120: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "instanc"
        case 121: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "instance"
        case 122: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "instanceo"
        case 124: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "inte"
        case 125: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "inter"
        case 126: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "interf"
        case 127: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "interfa"
        case 128: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "interfac"
        case 130: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "ca"
        case 131: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "cl"
        case 132: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "co"
        case 133: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "con"
        case 134: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "cont"
        case 135: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "cons"
        case 137: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "conti"
        case 138: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "contin"
        case 139: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "continu"
        case 141: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "cla"
        case 142: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "clas"
        case 144: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "cat"
        case 145: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "cas"
        case 147: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "catc"
        case 149: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "wh"
        case 150: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "wi"
        case 151: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "wit"
        case 153: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "whi"
        case 154: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "whil"
        case 156: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "br"
        case 157: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "bre"
        case 158: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "brea"
        case 160: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "ne"
        case 161: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "nu"
        case 162: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "nul"
        case 165: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "se"
        case 166: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "st"
        case 167: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "su"
        case 168: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "sw"
        case 169: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "swi"
        case 170: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "swit"
        case 171: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "switc"
        case 173: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "sup"
        case 174: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "supe"
        case 176: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "sta"
        case 177: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "stat"
        case 178: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "stati"
        case 181: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "le"
        case 183: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "fu"
        case 184: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "fa"
        case 185: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "fo"
        case 186: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "fi"
        case 187: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "fin"
        case 188: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "fina"
        case 189: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "final"
        case 190: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "finall"
        case 193: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "fal"
        case 194: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "fals"
        case 196: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "fun"
        case 197: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "func"
        case 198: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "funct"
        case 199: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "functi"
        case 200: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "functio"
        case 202: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "re"
        case 203: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "ret"
        case 204: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "retu"
        case 205: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "retur"
        case 207: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "tr"
        case 208: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "th"
        case 209: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "ty"
        case 210: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "typ"
        case 211: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "type"
        case 212: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "typeo"
        case 214: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "thr"
        case 215: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "thi"
        case 217: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "thro"
        case 219: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "tru"
        case 241: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "el"
        case 242: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "en"
        case 243: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "ex"
        case 244: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "ext"
        case 245: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "exp"
        case 246: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "expo"
        case 247: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "expor"
        case 249: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "exte"
        case 250: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "exten"
        case 251: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "extend"
        case 253: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "enu"
        case 255: // Recognized '{identifier_start}{identifier_part}*',	Shortest string "els"
return Identifier();
            break;
        case 6: // Recognized '"<"',	Shortest string "<"
return Token('<');
            break;
        case 7: // Recognized '{numeric_literal}',	Shortest string "0"
        case 8: // Recognized '{numeric_literal}',	Shortest string "1"
        case 257: // Recognized '{numeric_literal}',	Shortest string "0."
        case 258: // Recognized '{numeric_literal}',	Shortest string "0E0"
        case 259: // Recognized '{numeric_literal}',	Shortest string "0XE"
return Numeric();
            break;
        case 9: // Recognized '"."',	Shortest string "."
return Token('.');
            break;
        case 11: // Recognized '"+"',	Shortest string "+"
return Token('+');
            break;
        case 12: // Recognized '"-"',	Shortest string "-"
return Token('-');
            break;
        case 13: // Recognized '.',	Shortest string "\""
        case 14: // Recognized '.',	Shortest string "\0"
        case 15: // Recognized '.',	Shortest string "'"
Error();
            break;
        case 16: // Recognized '"{"',	Shortest string "{"
return Token('{');
            break;
        case 17: // Recognized '"}"',	Shortest string "}"
return Token('}');
            break;
        case 18: // Recognized '"["',	Shortest string "["
return Token('[');
            break;
        case 19: // Recognized '"]"',	Shortest string "]"
return Token(']');
            break;
        case 20: // Recognized '"("',	Shortest string "("
return Token('(');
            break;
        case 21: // Recognized '")"',	Shortest string ")"
return Token(')');
            break;
        case 22: // Recognized '","',	Shortest string ","
return Token(',');
            break;
        case 23: // Recognized '":"',	Shortest string ":"
return Token(':');
            break;
        case 24: // Recognized '";"',	Shortest string ";"
return Token(';');
            break;
        case 25: // Recognized '"%"',	Shortest string "%"
return Token('%');
            break;
        case 26: // Recognized '"&"',	Shortest string "&"
return Token('&');
            break;
        case 27: // Recognized '"|"',	Shortest string "|"
return Token('|');
            break;
        case 28: // Recognized '"^"',	Shortest string "^"
return Token('^');
            break;
        case 29: // Recognized '"!"',	Shortest string "!"
return Token('!');
            break;
        case 30: // Recognized '"~"',	Shortest string "~"
return Token('~');
            break;
        case 31: // Recognized '"="',	Shortest string "="
return Token('=');
            break;
        case 32: // Recognized '"?"',	Shortest string "?"
return Token('?');
            break;
        case 48: // Recognized '{whitespace}',	Shortest string "\t"
_lastNumeric = false;
            break;
        case 50: // Recognized '"get"',	Shortest string "get"
return Token(Tokens.KeyGet);
            break;
        case 52: // Recognized '"do"',	Shortest string "do"
return Token(Tokens.KeyDo);
            break;
        case 60: // Recognized '"debugger"',	Shortest string "debugger"
return Token(Tokens.KeyDebugger);
            break;
        case 63: // Recognized '"delete"',	Shortest string "delete"
return Token(Tokens.KeyDelete);
            break;
        case 67: // Recognized '"default"',	Shortest string "default"
return Token(Tokens.KeyDefault);
            break;
        case 71: // Recognized '"void"',	Shortest string "void"
return Token(Tokens.KeyVoid);
            break;
        case 72: // Recognized '"var"',	Shortest string "var"
return Token(Tokens.KeyVar);
            break;
        case 80: // Recognized '"package"',	Shortest string "package"
return Token(Tokens.KeyPackage);
            break;
        case 84: // Recognized '"public"',	Shortest string "public"
return Token(Tokens.KeyPublic);
            break;
        case 90: // Recognized '"private"',	Shortest string "private"
return Token(Tokens.KeyPrivate);
            break;
        case 96: // Recognized '"protected"',	Shortest string "protected"
return Token(Tokens.KeyProtected);
            break;
        case 100: // Recognized '"yield"',	Shortest string "yield"
return Token(Tokens.KeyYield);
            break;
        case 101: // Recognized '"if"',	Shortest string "if"
return Token(Tokens.KeyIf);
            break;
        case 102: // Recognized '"in"',	Shortest string "in"
return Token(Tokens.KeyIn);
            break;
        case 108: // Recognized '"import"',	Shortest string "import"
return Token(Tokens.KeyImport);
            break;
        case 114: // Recognized '"implements"',	Shortest string "implements"
return Token(Tokens.KeyImplements);
            break;
        case 123: // Recognized '"instanceof"',	Shortest string "instanceof"
return Token(Tokens.KeyInstanceof);
            break;
        case 129: // Recognized '"interface"',	Shortest string "interface"
return Token(Tokens.KeyInterface);
            break;
        case 136: // Recognized '"const"',	Shortest string "const"
return Token(Tokens.KeyConst);
            break;
        case 140: // Recognized '"continue"',	Shortest string "continue"
return Token(Tokens.KeyContinue);
            break;
        case 143: // Recognized '"class"',	Shortest string "class"
return Token(Tokens.KeyClass);
            break;
        case 146: // Recognized '"case"',	Shortest string "case"
return Token(Tokens.KeyCase);
            break;
        case 148: // Recognized '"catch"',	Shortest string "catch"
return Token(Tokens.KeyCatch);
            break;
        case 152: // Recognized '"with"',	Shortest string "with"
return Token(Tokens.KeyWith);
            break;
        case 155: // Recognized '"while"',	Shortest string "while"
return Token(Tokens.KeyWhile);
            break;
        case 159: // Recognized '"break"',	Shortest string "break"
return Token(Tokens.KeyBreak);
            break;
        case 163: // Recognized '"null"',	Shortest string "null"
return Token(Tokens.KeyNull);
            break;
        case 164: // Recognized '"new"',	Shortest string "new"
return Token(Tokens.KeyNew);
            break;
        case 172: // Recognized '"switch"',	Shortest string "switch"
return Token(Tokens.KeySwitch);
            break;
        case 175: // Recognized '"super"',	Shortest string "super"
return Token(Tokens.KeySuper);
            break;
        case 179: // Recognized '"static"',	Shortest string "static"
return Token(Tokens.KeyStatic);
            break;
        case 180: // Recognized '"set"',	Shortest string "set"
return Token(Tokens.KeySet);
            break;
        case 182: // Recognized '"let"',	Shortest string "let"
return Token(Tokens.KeyLet);
            break;
        case 191: // Recognized '"finally"',	Shortest string "finally"
return Token(Tokens.KeyFinally);
            break;
        case 192: // Recognized '"for"',	Shortest string "for"
return Token(Tokens.KeyFor);
            break;
        case 195: // Recognized '"false"',	Shortest string "false"
return Token(Tokens.KeyFalse);
            break;
        case 201: // Recognized '"function"',	Shortest string "function"
return Token(Tokens.KeyFunction);
            break;
        case 206: // Recognized '"return"',	Shortest string "return"
return Token(Tokens.KeyReturn);
            break;
        case 213: // Recognized '"typeof"',	Shortest string "typeof"
return Token(Tokens.KeyTypeof);
            break;
        case 216: // Recognized '"this"',	Shortest string "this"
return Token(Tokens.KeyThis);
            break;
        case 218: // Recognized '"throw"',	Shortest string "throw"
return Token(Tokens.KeyThrow);
            break;
        case 220: // Recognized '"try"',	Shortest string "try"
return Token(Tokens.KeyTry);
            break;
        case 221: // Recognized '"true"',	Shortest string "true"
return Token(Tokens.KeyTrue);
            break;
        case 222: // Recognized '"=>"',	Shortest string "=>"
return Token(Tokens.Arrow);
            break;
        case 223: // Recognized '"=="',	Shortest string "=="
return Token(Tokens.LogicalEqual);
            break;
        case 224: // Recognized '"==="',	Shortest string "==="
return Token(Tokens.ExactEqual);
            break;
        case 225: // Recognized '"!="',	Shortest string "!="
return Token(Tokens.LogicalNotEqual);
            break;
        case 226: // Recognized '"!=="',	Shortest string "!=="
return Token(Tokens.ExactNotEqual);
            break;
        case 227: // Recognized '"^="',	Shortest string "^="
return Token(Tokens.ExclusiveOrAssign);
            break;
        case 228: // Recognized '"||"',	Shortest string "||"
return Token(Tokens.LogicalOr);
            break;
        case 229: // Recognized '"|="',	Shortest string "|="
return Token(Tokens.OrAssign);
            break;
        case 230: // Recognized '"&&"',	Shortest string "&&"
return Token(Tokens.LogicalAnd);
            break;
        case 231: // Recognized '"&="',	Shortest string "&="
return Token(Tokens.AndAssign);
            break;
        case 232: // Recognized '"%="',	Shortest string "%="
return Token(Tokens.RemainderAssign);
            break;
        case 233: // Recognized '{string_invalid}',	Shortest string "\"\u2028"
        case 235: // Recognized '{string_invalid}',	Shortest string "'<<EOF>>"
        case 236: // Recognized '{string_invalid}',	Shortest string "\"<<EOF>>"
Error();
            break;
        case 234: // Recognized '{string_literal}',	Shortest string "\"\""
return String();
            break;
        case 237: // Recognized '"--"',	Shortest string "--"
if (_isLineTerminator) { yyless(0); return Token(';'); } return Token(Tokens.Decrement);
            break;
        case 238: // Recognized '"-="',	Shortest string "-="
return Token(Tokens.SubtractAssign);
            break;
        case 239: // Recognized '"++"',	Shortest string "++"
if (_isLineTerminator) { yyless(0); return Token(';'); } return Token(Tokens.Increment);
            break;
        case 240: // Recognized '"+="',	Shortest string "+="
return Token(Tokens.AddAssign);
            break;
        case 248: // Recognized '"export"',	Shortest string "export"
return Token(Tokens.KeyExport);
            break;
        case 252: // Recognized '"extends"',	Shortest string "extends"
return Token(Tokens.KeyExtends);
            break;
        case 254: // Recognized '"enum"',	Shortest string "enum"
return Token(Tokens.KeyEnum);
            break;
        case 256: // Recognized '"else"',	Shortest string "else"
return Token(Tokens.KeyElse);
            break;
        case 260: // Recognized '"<<"',	Shortest string "<<"
return Token(Tokens.ShiftLeft);
            break;
        case 261: // Recognized '"<="',	Shortest string "<="
return Token(Tokens.LessEqual);
            break;
        case 262: // Recognized '"<<="',	Shortest string "<<="
return Token(Tokens.ShiftLeftAssign);
            break;
        case 263: // Recognized '"*="',	Shortest string "*="
return Token(Tokens.MultiplyAssign);
            break;
        case 264: // Recognized '">>"',	Shortest string ">>"
return Token(Tokens.ShiftRight);
            break;
        case 265: // Recognized '">="',	Shortest string ">="
return Token(Tokens.MoreEqual);
            break;
        case 266: // Recognized '">>>"',	Shortest string ">>>"
return Token(Tokens.ShiftArithmeticRight);
            break;
        case 267: // Recognized '">>="',	Shortest string ">>="
return Token(Tokens.ShiftRightAssign);
            break;
        case 268: // Recognized '">>>="',	Shortest string ">>>="
return Token(Tokens.ShiftArithmeticRightAssign);
            break;
        case 269: // Recognized '{comment_singleline}',	Shortest string "//"
_lastNumeric = false;
            break;
        case 270: // Recognized '"/="',	Shortest string "/="
return Token(Tokens.DivideAssign);
            break;
        case 271: // Recognized '{comment_invalid_delimited}',	Shortest string "/*<<EOF>>"
Error();
            break;
        case 272: // Recognized '{comment_delimited}',	Shortest string "/*\u2028*/"
_isLineTerminator = true; _lastNumeric = false; if (_isRestricted) return Token(';');
            break;
        case 273: // Recognized '{comment_delimited_sl}',	Shortest string "/**/"
_lastNumeric = false;
            break;
        case 274: // In <REGEX> Recognized '.',	Shortest string ">"
        case 275: // In <REGEX> Recognized '.',	Shortest string "/"
Error();
            break;
        case 276: // In <REGEX> Recognized '{regex}',	Shortest string "/>/"
return Regex();
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
        }

#if BACKUP
        Result Recurse2(ref Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, code) != goStart AND
            //         NextState(state, code) is not an accept state.
            //
            SaveStateAndPos(ref ctx);
            state = next;
            GetCode();

            while ((next = NextState()) > eofNum)
            {
                if (state <= maxAccept && next > maxAccept) // need to update backup data
                    SaveStateAndPos(ref ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetCode(); 
            }
            return (state <= maxAccept ? Result.accept : Result.noMatch);
        }

        void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }

#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner

// ==============================================================
// <auto-generated>
// This code automatically produced from an embedded resource.
// Do not edit this file, or it will become incompatible with 
// the specification from which it was generated.
// </auto-generated>
// ==============================================================

// Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception
    {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff
    {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source)
        {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source)
        {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source)
        {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
        {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff
    {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source)
        {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read()
        {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit)
        {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff
    {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList)
        {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read()
        {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart)
        {
            if (pos >= cachedPosition)
            {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else
            {
                ix = lstart = 0;
            }
            while (ix < numLines)
            {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit)
        {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx)
            {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length)
            {
                sb.Append(s.Substring(0, endCol));
            }
            else
            {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos
        {
            get { return cPos; }
            set
            {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff
    {
        // Double buffer for char stream.
        class BufferElement
        {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index]
            {
                get
                {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count)
            {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else
                {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit)
            {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit)
            {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName
        {
            get
            {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read()
        {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex)
            {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else
                {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit)
        {
            return data.GetString(begin, limit);
        }

        public override string ToString()
        {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory
    {
        public static BlockReader Raw(Stream stream)
        {
            return delegate(char[] block, int index, int number)
            {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage)
        {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream)
        {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling
    {
        public static int GetCodePage(string option)
        {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try
            {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else
                {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException)
            {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException)
            {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
#region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser
    {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser()
        {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan()
        {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum)
                {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept)
                {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state)
                    {
                        case eofNum:
                            switch (currentStart)
                            {
                                case 11:
                                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                                    else return 65001;                     /* UTF-8 encoding */
                                    break;
                            }
                            return EndToken;
                        case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                        case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                        case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                        case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                            uppr++;
                            break;
                        case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                            uppr += 2;
                            break;
                        case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                            uppr += 3;
                            break;
                        case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                            utfX += 3;
                            break;
                        case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                            uppr += 2;
                            break;
                        case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                            utfX += 2;
                            break;
                        case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                            utfX++;
                            break;
                        default:
                            break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser
    
#endif // !BYTEMODE
#endregion
#endif // !NOFILES

// End of code copied from embedded resource

} // end namespace
